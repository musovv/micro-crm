# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from enum import Enum
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator, field_validator, conlist  # noqa: F401

from crm.openapi_server.models.note import Note
from crm.openapi_server.models.terminal import Terminal


class StatusEnum(str, Enum):
    CREATED = "created"
    PAID = "paid"
    EXPIRED = "expired"
    PARTIALLY_REFUNDED = "partially_refunded"
    REFUNDED = "refunded"

    def to_int(self):
        _d = {
            "created": 0,
            "paid": 1,
            "expired": 2,
            "partially_refunded": 3,
            "refunded": 4,
        }
        return _d[self.value]

    @classmethod
    def from_int(cls, value):
        _d = {
            0: "created",
            1: "paid",
            2: "expired",
            3: "partially_refunded",
            4: "refunded",
        }
        return cls(_d[value])


class Order(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    Order - a model defined in OpenAPI

        id: The id of this Order [Optional].
        number: The number of this Order [Optional].
        _date: The _date of this Order.
        status: The status of this Order.
        amount: The amount of this Order.
        link_pay: The link_pay of this Order.
        terminal: The terminal of this Order.
        client_id: The client_id of this Order.
        products: The products of this Order.
        note: The note of this Order [Optional].
    """

    id: Optional[str] = Field(alias="id", default=None)
    number: Optional[str] = Field(alias="number", default=None)
    date: datetime = Field(alias="date", default=None)
    status: StatusEnum = Field(alias="status", default=None)
    amount: object = Field(alias="amount", default=None)
    link_pay: object = Field(alias="link_pay", default=None)
    terminal: Optional[Terminal] = Field(alias="terminal", default=None)
    client_id: object = Field(alias="client_id")
    items: conlist(item_type=object, min_length=1) = Field(alias="items")
    notes: conlist(item_type=Note, min_length=0) = Field(alias="notes", default=[])
    comment: Optional[object] = Field(alias="comment", default=None)

    class Config:
        arbitrary_types_allowed = True

    @field_validator("number")
    def number_max_length(cls, value):
        assert len(value) <= 16
        return value

    @field_validator("link_pay")
    def link_pay_min_length(cls, value):
        if value is None:
            return value
        assert len(value) >= 1
        return value

    @field_validator("link_pay")
    def link_pay_max_length(cls, value):
        if value is None:
            return value
        assert len(value) <= 255
        return value

    @field_validator("comment")
    def comment_max_length(cls, value):
        if value is not None:
            assert len(value) <= 1024
        return value

Order.update_forward_refs()
