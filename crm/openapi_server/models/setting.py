# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401
import pytz

import re  # noqa: F401
from enum import Enum
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator, field_validator  # noqa: F401
from crm.openapi_server.models.notification import Notification


class CurrencyEnum(str, Enum):
    USD = 'usd'
    UZS = 'uzs'
    EUR = 'eur'
    KZT = 'kzt'
    RUB = 'rub'
    ILS = 'ils'


class LanguageEnum(str, Enum):
    EN = 'en'
    UZ = 'uz'
    KZ = 'kz'
    RU = 'ru'


class Setting(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    Setting - a model defined in OpenAPI

        id: The id of this Setting [Optional].
        organization_id: The organization_id of this Setting [Optional].
        company_name: The name_company of this Setting [Optional].
        currency: The currency of this Setting [Optional].
        timezone: The timezone of this Setting [Optional].
        language: The language of this Setting [Optional].
        notification: The notification of this Setting [Optional].
    """

    id: Optional[object] = Field(alias="id", default=None)
    organization_id: Optional[object] = Field(alias="organization_id", default=None)
    company_name: Optional[object] = Field(alias="company_name", default=None)
    currency: Optional[CurrencyEnum] = Field(alias="currency", default=None)
    timezone: Optional[str] = Field(alias="timezone", default=None)
    language: Optional[LanguageEnum] = Field(alias="language", default=None)
    notification: Optional[Notification] = Field(alias="notification", default=None)

    class Config:
        arbitrary_types_allowed = True

    @field_validator("timezone")
    def check_timezone(cls, value):
        if value is None:
            return value
        if not (value in pytz.all_timezones):
            raise ValueError('Invalid timezone')
        return value


Setting.update_forward_refs()
